plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.google.osdetector' version '1.7.3'
    id "application"
}

project.ext.lwjglVersion = "3.3.4"

group = 'com.github.qpcrummer'
version = '1.0.0-pre.4'

repositories {
    mavenCentral()
    maven {
        name = "TarsosDSP repository"
        url = "https://mvn.0110.be/releases"
    }
}

ext {
    lwjglVersion = '3.3.4'

    //LWJGL modules used: minimal OpenGL
    lwjglModules = ['lwjgl', 'lwjgl-assimp', 'lwjgl-glfw', 'lwjgl-openal', 'lwjgl-opengl', 'lwjgl-stb']

    platforms = ['windows', 'linux', 'macos']
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'org.slf4j:slf4j-api:2.1.0-alpha1'
    implementation 'org.slf4j:slf4j-jdk14:2.1.0-alpha1'
    implementation ('io.github.spair:imgui-java-app:1.87.6')
    implementation 'be.tarsos.dsp:core:2.5'
    implementation 'be.tarsos.dsp:jvm:2.5'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.github.oshi:oshi-core:6.6.5'
    implementation 'net.lingala.zip4j:zip4j:2.11.5'

    //get recommended dependency versions from the LWJGL BOM
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    platforms.eachWithIndex { platform, index ->
        //add LWJGL modules and the current OS's natives to the compile and runtime classpaths
        lwjglModules.each {
            implementation "org.lwjgl:$it"
            if (it != 'lwjgl-egl')  //lwjgl-egl has no native libraries
                runtimeOnly "org.lwjgl:$it::natives-${platform}"
        }
    }
}

tasks.register('extractLwjglManifest', Copy) {
    from {
        configurations.compileClasspath.filter { it.name == "lwjgl-${lwjglVersion}.jar" }
                .collect { zipTree(it) }
    }
    include 'META-INF/MANIFEST.MF'
    into "$rootProject.layout.buildDirectory/tmp"
}

application {
    mainClassName = 'com.github.qpcrummer.beatmaker.Main'
}

test {
    useJUnitPlatform()
}

shadowJar {
    manifest {
        attributes(
                'Main-Class': 'com.github.qpcrummer.beatmaker.Main'
        )
    }
    archiveClassifier.set('')
    archiveVersion.set('')
}

tasks.register('printVersionName') {
    println version
}

